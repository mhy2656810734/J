class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
       // 首先我们创建一个一维数组，将所有二维数组的数据放入一维数组，然后进行拼接
       // 核心思路：设置四个边界 依次向中间收缩
       int high = matrix.length;
       int width = matrix[0].length;
       int[] arr = new int[high*width];
       int left = 0;// 左边界
       int right = width - 1;// 右边界
       int button = high - 1;// 下边界
       int top = 0; // 上边界
       int index = 0;// 表示arr的下标
       while (true) {
           // 上边界   列在变化
           for (int i = left; i <= right; i++) {
               arr[index++] = matrix[top][i];
           }
           top++;// 向下收缩，然后判断是否合法
           if (top > button) {
               break;
           }
            // 右边界  行在变化
           for (int i = top; i <= button; i++) {
               arr[index++] = matrix[i][right];
           }
           right--; // 向左收缩 判断合法
           if (right < left) {
               break;
           }
            // 下边界 列在变化
           for(int i = right; i >= left;i--) {
               arr[index++] = matrix[button][i];
           }
           button--;// 向上收缩 判断合法
           if (button < top) {
               break;
           }
          
          
           // 左边界 行在变化
           for (int i=button;i>= top; i--) {
               arr[index++] = matrix[i][left];  
           }
           left++;// 向右收缩 判断合法
           if (left > right) {
               break;
           }
       }
       List<Integer> list = new ArrayList<>();
       for (int i:arr) {
           list.add(i);
       }
       return list;
    }
}
