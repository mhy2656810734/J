import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

/**
 * 泛型
 * 通配符上界 和 下界
 * 通配符的上界可以进行获取数据，但是无法修改（写入）数据
 * 通配符的下界可以修改(写入）数据，但是无法获取数据
 * @author 26568
 * @date 2022-09-08 11:11
 */

//       通配符上界
class Food {

}
class Fruit extends Food {

}
class Apple extends Fruit {

}
class Banana extends Fruit {

}
class Message<T> {
    private T message;
    public void setMessage(T message) {
        this.message = message;
    }
    public T getMessage() {
        return this.message;
    }
}
public class TextDemo1 {
    public static void main(String[] args) {
        // 通配符上界
//        Message<Apple> message = new Message<>();
//        message.setMessage(new Apple());
//        fun(message);
//        Message<Banana> message1 = new Message<>();
//        message1.setMessage(new Banana());
//        fun(message1);

        // 通配符下界
        Message1<Fruit> message1 = new Message1<>();
        message1.setMessage(new Fruit());
        func(message1);
        Message1<Food> message11 = new Message1<>();
        message11.setMessage(new Food());
        func(message11);

    }
    // 此时通配符 ? 描述的是可以接受任意类型， 但是由于不能确定是何种类型，所以无法修改
    public static void fun(Message<? extends Fruit> temp) { // 可以传入的是Fruit类型或者其子类
        // 此时无法在fun函数中对temp进行添加元素，因为temp接收的是Fruit和他的子类，
        // 此时存储的元素应该是哪个子类无法确定。所以添加会报错！但是可以获取元素。
//        temp.setMessage(new Apple());   // 无法进行修改
//        temp.setMessage(new Banana());  // 无法进行修改
//        System.out.println(temp.getMessage());   可以输出
        Fruit f = temp.getMessage();
        System.out.println(f);  // 可以输出
    }
    // temp 接收的是 Fruit或者其父类
    public static void func(Message1<? super Fruit> temp) {
        temp.setMessage(new Apple());// 可以修改  Apple是 Fruit的子类
        temp.setMessage(new Fruit());// 可以修改其本身、
        //Fruit f = temp.getMessage();// 无法获取 因为无法确定是哪个父类
        System.out.println(temp.getMessage());// 只能直接输出
    }
}
//          通配符下界
class Food1 { }
class Fruit1 extends Food { }
class Apple1 extends Fruit { }
class Message1<T> {
    private T message ;
    public T getMessage() {
        return message;
    }
    public void setMessage(T message) {
        this.message = message;
    }
}
